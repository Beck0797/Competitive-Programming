https://leetcode.com/problems/maximum-depth-of-binary-tree/submissions/

// /**
//  * Definition for a binary tree node.
//  * struct TreeNode {
//  *     int val;
//  *     TreeNode *left;
//  *     TreeNode *right;
//  *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
//  *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
//  *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
//  * };
//  */
// class Solution {
// public:
//     int maxDepth(TreeNode* root) {
//         if(root == NULL) return 0;
//         int r = 1;
//         int l = 1;
//         TreeNode* copy = root;
//         while(root){
            
//             if(root -> right){
//                 root = root -> right;
//             }else if (root -> left){
//                 root = root -> left;
//             }else{
//                 break;
//             }
//             r++;
//         }
        
//          while(copy){
             
//             if(copy->left){
//                 copy = copy -> left;
                
//             }else if(copy -> right){
//                 copy = copy -> right;
//             } else {
              
//                 break;
//             } 
//             l++;
//         }
        
//         return max(r, l);
        
//     }
// };

class Solution {
public:
    int maxDepth(TreeNode* root) {
        if(root == NULL)
            return 0;
        return 1 + max(maxDepth(root->right),maxDepth(root->left));
    }
};
