//https://leetcode.com/problems/symmetric-tree/submissions/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<int> v_left;
    vector<int> v_right;
    
    void getLeft(TreeNode *node) {
        if (node == NULL){
            v_left.push_back(0);
            return;
        } 
        v_left.push_back(node -> val);
        
        getLeft(node -> left);
        getLeft(node -> right);
    }
    
      void getRight(TreeNode *node) {
          if (node == NULL){
            v_right.push_back(0);
            return;
        } 
        v_right.push_back(node -> val);

        getRight(node -> right);
        getRight(node -> left);
    }
    
    
    bool isSymmetric(TreeNode* root) {
        {
            getLeft(root -> left);
            getRight(root -> right);
            
            if(v_left.size() != v_right.size()) return false;
            
            for(int i = 0; i < v_left.size(); ++i) {
                if(v_left[i] != v_right[i]) return false;
            }

            
        }
        
        return true;
    }
};
